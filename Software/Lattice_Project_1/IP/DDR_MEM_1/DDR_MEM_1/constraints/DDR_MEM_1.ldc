set architecture "LIFCL"
set device "LIFCL-40"
set package "CABGA256"
set speed "7_High-Performance_1.0V"
set WRAPPER_INST "lscc_ddr_mem_inst"
set INTERFACE_TYPE "DDR3"
set IO_TYPE "SSTL15_II"
set CK_DQS_IO "SSTL15D_II"
set GEARING 2
set BUS_WIDTH 16
set NUM_DQS_GROUP 2
set DATA_MASK_ENABLE 0
set CLK_ADDR_CMD_ENABLE 1
set DYN_MARGIN_ENABLE 0
set CLK_FREQ 400
set PLL_EN 0
set INTFBKDEL_SEL "DISABLED"
set PMU_WAITFORLOCK "ENABLED"
set REF_OSC_CTRL "3P2"
set REF_COUNTS "0000"
set EN_REFCLK_MON 0
set CLKI_FREQ 100.000000
set CLKI_DIVIDER_ACTUAL_STR "1"
set FRAC_N_EN 0
set FBK_MODE "CLKOP"
set FBCLK_DIVIDER_ACTUAL_STR "4"
set SSC_N_CODE_STR "0b000000100"
set SSC_F_CODE_STR "0b000000000000000"
set SS_EN 0
set SSC_PROFILE "DOWN"
set SSC_TBASE_STR "0b000000000000"
set SSC_STEP_IN_STR "0b0000000"
set SSC_REG_WEIGHTING_SEL_STR "0b000"
set CLKOP_BYPASS 0
set ENCLKOP_EN 0
set CLKOP_FREQ_ACTUAL 400.000000
set CLKOP_PHASE_ACTUAL 0.000000
set DIVOP_ACTUAL_STR "3"
set DELA "3"
set PHIA "0"
set TRIM_EN_P 0
set CLKOP_TRIM_MODE "Falling"
set CLKOP_TRIM "0b0000"
set CLKOS_EN 1
set CLKOS_BYPASS 0
set ENCLKOS_EN 0
set CLKOS_FREQ_ACTUAL 100.000000
set CLKOS_PHASE_ACTUAL 0.000000
set DIVOS_ACTUAL_STR "15"
set DELB "15"
set PHIB "0"
set TRIM_EN_S 0
set CLKOS_TRIM_MODE "Falling"
set CLKOS_TRIM "0b0000"
set CLKOS2_EN 0
set CLKOS2_BYPASS 0
set ENCLKOS2_EN 0
set CLKOS2_FREQ_ACTUAL 100.000000
set CLKOS2_PHASE_ACTUAL 0.000000
set DIVOS2_ACTUAL_STR "7"
set DELC "7"
set PHIC "0"
set CLKOS3_EN 0
set CLKOS3_BYPASS 0
set ENCLKOS3_EN 0
set CLKOS3_FREQ_ACTUAL 100.000000
set CLKOS3_PHASE_ACTUAL 0.000000
set DIVOS3_ACTUAL_STR "7"
set DELD "7"
set PHID "0"
set CLKOS4_EN 0
set CLKOS4_BYPASS 0
set ENCLKOS4_EN 0
set CLKOS4_FREQ_ACTUAL 100.000000
set CLKOS4_PHASE_ACTUAL 0.000000
set DIVOS4_ACTUAL_STR "7"
set DELE "7"
set PHIE "0"
set CLKOS5_EN 0
set CLKOS5_BYPASS 0
set ENCLKOS5_EN 0
set CLKOS5_FREQ_ACTUAL 100.000000
set CLKOS5_PHASE_ACTUAL 0.000000
set DIVOS5_ACTUAL_STR "7"
set DELF "7"
set PHIF "0"
set PLL_REFCLK_FROM_PIN 0
set PLL_IO_TYPE "SLVS"
set DYN_PORTS_EN 0
set PLL_RST 1
set LOCK_EN 1
set PLL_LOCK_STICKY 0
set LMMI_EN 0
set APB_EN 0
set LEGACY_EN 0
set POWERDOWN_EN 0
set IPI_CMP "0b1100"
set CSET "8P"
set CRIPPLE "1P"
set IPP_CTRL "0b0110"
set IPP_SEL "0b1111"
set BW_CTL_BIAS "0b1111"
set V2I_PP_RES "9K"
set KP_VCO "0b00011"
set V2I_KVCO_SEL "60"
set V2I_1V_EN "ENABLED"
set NUM_DDRCLK 1
set ADDR_WIDTH 13
set NUM_CS 1
set NUM_ODT 1
set NUM_CKE 1
set BA_WIDTH 3
set DQS_RD_DEL_SIGN "POSITIVE"
set DQS_RD_DEL_VALUE_INT 0
set DQS_RD_DEL_VALUE "0"
set DQS_WR_DEL_SIGN "POSITIVE"
set DQS_WR_DEL_VALUE_INT 0
set DQS_WR_DEL_VALUE "0"


#set NUM_DQ_PER_GROUP [expr {NUM_DQS_GROUP * 8}] 
set CLK_PERIOD [expr {double(round(1000000000/$CLK_FREQ))/1000000}]

##================================== Generate Clocks ======================================##
if {($PLL_EN)} {
    create_clock -name {pll_refclk_i} -period $CLK_PERIOD [get_ports pll_refclk_i]
    ldc_set_port -iobuf IO_TYPE=$PLL_IO_TYPE [get_ports pll_refclk_i]
}
##=========================================================================================##


##=========================================================================================##
#### IO_TYPE constraints                                                                 ####
##=========================================================================================##

##================================== DQS/DQ IO Type =======================================##
for {set i 0} {$i < $NUM_DQS_GROUP} {incr i} {
     ldc_set_port -iobuf IO_TYPE=$CK_DQS_IO [get_ports dqs$i\_io]
	 for {set j 0} {$j < 8} {incr j} {
		ldc_set_port -iobuf IO_TYPE=$IO_TYPE [get_ports dq_dqs$i\_io\[$j\]]
	}
}

##=================================== Data Mask ===========================================##
if {($DATA_MASK_ENABLE)} {
   for {set i 0} {$i < $NUM_DQS_GROUP} {incr i} {
      ldc_set_port -iobuf IO_TYPE=$IO_TYPE [get_ports dm_dqs$i\_o]
   }
}

##============================ Clock Address and Command ==================================##
if {($CLK_ADDR_CMD_ENABLE)} {
   for {set i 0} {$i < $NUM_CKE} {incr i} {
		ldc_set_port -iobuf IO_TYPE=$IO_TYPE [get_ports cke_o\[$i\]]
   }
   for {set i 0} {$i < $NUM_CS} {incr i} {
		ldc_set_port -iobuf IO_TYPE=$IO_TYPE [get_ports csn_o\[$i\]]
   }
   for {set i 0} {$i < $NUM_DDRCLK} {incr i} {
		ldc_set_port -iobuf IO_TYPE=$CK_DQS_IO [get_ports ck_o\[$i\]]
   }
   
   if {!($INTERFACE_TYPE == "DDR3" || $INTERFACE_TYPE == "DDR3L")} {
       for {set i 0} {$i < 9} {incr i} {
		 ldc_set_port -iobuf IO_TYPE=$CK_DQS_IO [get_ports ca_o\[$i\]]
       }
   }

   if {!($INTERFACE_TYPE == "LPDDR2" || $INTERFACE_TYPE == "LPDDR3")} {
      ldc_set_port -iobuf IO_TYPE=$IO_TYPE [get_ports rasn_o]
      ldc_set_port -iobuf IO_TYPE=$IO_TYPE [get_ports casn_o]
      ldc_set_port -iobuf IO_TYPE=$IO_TYPE [get_ports wen_o]
	  for {set i 0} {$i < $NUM_ODT} {incr i} {
          ldc_set_port -iobuf IO_TYPE=$IO_TYPE [get_ports odt_o\[$i\]]
	  }
	  for {set i 0} {$i < $ADDR_WIDTH} {incr i} {
		  ldc_set_port -iobuf IO_TYPE=$IO_TYPE [get_ports addr_o\[$i\]]
	  }
	  for {set i 0} {$i < $BA_WIDTH} {incr i} {
          ldc_set_port -iobuf IO_TYPE=$IO_TYPE [get_ports ba_o\[$i\]]
	  }
   }
}
##=========================================================================================##
